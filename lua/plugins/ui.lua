return {
	{ "nvim-tree/nvim-web-devicons", },
	{
		"nvim-lualine/lualine.nvim",
		event = "VimEnter",
		opts = {
			options = {
				globalstatus = false,
				icons_enabled = true,
				component_separators = '|',
				section_separators = { left = '', right = '' },
				disabled_filetypes = {
				},
				ignore_focus = {
					"TelescopePrompt",
				},
			},
			sections = {
				lualine_a = {{ 'mode', separator = { left = '' }, right_padding = 2 }},
				lualine_b = {'filename', 'branch'},
				lualine_c = {'diagnostics'},
				lualine_x = {},
				lualine_y = {'filetype', 'progress'},
				lualine_z = {{ 'location', separator = { right = '' }, left_padding = 2 }},
			},
			inactive_sections = {
				lualine_a = {'filename'},
				lualine_b = {},
				lualine_c = {},
				lualine_x = {},
				lualine_y = {},
				lualine_z = {'location'},
			},
			tabline = {},
			extensions = {},
		},
	},
	{
		"akinsho/bufferline.nvim",
		event = "VimEnter",
		opts = {},
	},
	{
		"onsails/lspkind.nvim",
		opts = {
			mode = "symbol",
			symbol_map = {
				Array = "",
				Boolean = "⊨",
				Class = "",
				Constructor = "",
				Key = "",
				Namespace = "",
				Null = "NULL",
				Number = "#",
				Object = "",
				Package = "",
				Property = "",
				Reference = "",
				Snippet = "",
				String = "",
				TypeParameter = "",
				Unit = "",
			},
		},
		enabled = true,
		config = function(_, opts) require("lspkind").init(opts) end,
	},
	{
		"lukas-reineke/indent-blankline.nvim",
		event = "BufRead",
		opts = {
			buftype_exclude = {
				"nofile",
				"terminal",
			},
			filetype_exclude = {
				"help",
				"startify",
				"aerial",
				"alpha",
				"dashboard",
				"lazy",
				"neogitstatus",
				"NvimTree",
				"neo-tree",
				"Trouble",
			},
			context_patterns = {
				"class",
				"return",
				"function",
				"method",
				"^if",
				"^while",
				"jsx_element",
				"^for",
				"^object",
				"^table",
				"block",
				"arguments",
				"if_statement",
				"else_clause",
				"jsx_element",
				"jsx_self_closing_element",
				"try_statement",
				"catch_clause",
				"import_statement",
				"operation_type",
			},
			show_trailing_blankline_indent = false,
			use_treesitter = true,
			char = "▏",
			context_char = "▏",
			show_current_context = true,
		},
	},
}
